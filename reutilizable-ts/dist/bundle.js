(()=>{"use strict";var t;!function(t){t.image="image",t.name="name",t.status="status",t.specie="specie",t.type="type",t.origin="origin",t.episode="episode"}(t||(t={}));class e extends HTMLElement{static get observedAttributes(){return Object.keys(t)}attributeChangedCallback(t,e,n){this[t]=n,this.render()}constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){this.shadowRoot&&(this.shadowRoot.innerHTML=`\n            <section>\n            <img id="img" src="${this.image?this.image:"Not found"}">\n            <p>${this.name}</p>\n            <p>${this.status}</p>\n            <p>${this.specie}</p>\n            <p>${this.type}</p>\n            <p>${this.origin}</p>\n            <p>${this.episode}</p>\n            </section>\n            \n            `)}}customElements.define("card-character",e);class n extends HTMLElement{constructor(){super(),this.cards=[],this.dataApi=[],this.attachShadow({mode:"open"})}connectedCallback(){return t=this,e=void 0,i=function*(){var t,e,n,i;this.dataApi=yield(t=void 0,e=void 0,n=void 0,i=function*(){try{return(yield fetch("https://rickandmortyapi.com/api/character").then((t=>t.json()))).results}catch(t){console.error(t)}},new(n||(n=Promise))((function(s,r){function a(t){try{c(i.next(t))}catch(t){r(t)}}function o(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}))),this.render()},new((n=void 0)||(n=Promise))((function(s,r){function a(t){try{c(i.next(t))}catch(t){r(t)}}function o(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,o)}c((i=i.apply(t,e||[])).next())}));var t,e,n,i}createCardsRickandMorty(e){this.cards=[],this.dataApi.slice(0,e).forEach((e=>{const n=this.ownerDocument.createElement("card-character");n.setAttribute(t.image,e.image),n.setAttribute(t.name,e.name),n.setAttribute(t.status,e.status),n.setAttribute(t.specie,e.species),n.setAttribute(t.type,e.type),n.setAttribute(t.origin,e.origin.name),n.setAttribute(t.episode,e.episode[0]),this.cards.push(n)}))}render(){if(this.shadowRoot){this.shadowRoot.innerHTML=`\n                <div>\n                    <input id="cardCount" type="number" placeholder="Enter number of cards" min="1" max="${this.dataApi.length}" />\n                    <button id="renderButton">Render Cards</button>\n                </div>\n                <div id="cardContainer"></div>\n            `;const t=this.shadowRoot.querySelector("#renderButton"),e=this.shadowRoot.querySelector("#cardCount"),n=this.shadowRoot.querySelector("#cardContainer");t.addEventListener("click",(()=>{const t=parseInt(e.value)||0;n.innerHTML="",this.createCardsRickandMorty(t),this.cards.forEach((t=>{n.appendChild(t)}))}))}}}customElements.define("app-container",n)})();